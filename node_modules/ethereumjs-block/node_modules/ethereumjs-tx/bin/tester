#!/usr/bin/env node
// require('../test/transactions.js')

const argv = require('minimist')(process.argv.slice(2))
const async = require('async')
const tape = require('tape')
const path = require('path')
const cp = require('child_process')

runTests('transaction', argv)


function getTests(type, argv) {
  
  if(argv.local){
    var base = path.basename(argv.local)
    return {
      base : require(argv.local)
    }
  }

  var tests = require('ethereum-tests')[type + 'Tests']

  //for running a single file
  if (argv.file) {
    var i = {}
    i[argv.file] = tests[argv.file]

    //run a single test from a single file
    if (argv.test) {
      i[argv.file] = {}
      i[argv.file][argv.test] = tests[argv.file][argv.test]
    }

    tests = i
  }

  return tests
}

function runTests(type, argv, cb) {
  var tests = getTests(type, argv)
  const runner = require('../test/' + type + 'Runner')
  const skip = [
    'unpadedRValue'
  ]

  //run all of the tests
  async.eachSeries(Object.keys(tests), function(fileName, done) {
    var file = tests[fileName]
    async.eachSeries(Object.keys(file), function(testName, done2) {
      var test = file[testName]
      tape('[' + fileName + '] ' + testName, function(t) {
        if(skip.indexOf(testName) === -1){
          runner(test, {
            t: t,
            vmtrace: argv.vmtrace
          }, function() {
            t.end()
            done2()
          })
        }else{
          t.skip('testName')
          t.end()
          done2()
        }
      })
    }, done)
  }, cb)
}
